{
  "response": {
    "docs": [
      {
        "Id": [75182625],
        "Body": "I'm a newbie when it comes to javascript or jquery stuff.\nI have this website here: [https://www.brindestip.com.br/brindes/Agendas](https://www.brindestip.com.br/brindes/Agendas)\nIt's loading the same thing over and over again when i scroll. It wasn't like this before and i don't know what happened.\nHere's the lazyload code:[https://www.brindestip.com.br/js/lib/jquery.lazyload.js](https://www.brindestip.com.br/js/lib/jquery.lazyload.js)\nCan you guys tell me whats wrong with the code so i can fix it? I tried looking at it myself and i saw other topics about people with similar situations but seems like my code is different from then and/or i didn't uderstand.\nThanks.\n",
        "Title": "Lazyload is loading the same page or content over and over again",
        "score": 0.8722497
      },
      {
        "Id": [75085865],
        "Body": "I am trying to lazy load my collection list with filters in Javascript.\nThe normal lazy loading works perfectly (without filtering).\nThe only issue I am having is that whenever I am selecting a filter the results all still have their lazy load classes applied.\nI am checking the url for search parameters, that are being applied or removed via the filter.\nHow can I fix this?\n```\n\u003Cscript\u003E\n const collectionList = document.querySelector('.swiper-wrapper');\nconst items = collectionList.querySelectorAll('.swiper-slide');\n\nlet observer;\nlet currentIndex = 0;\nconst batchSize = 3;\n\nconst showNextBatch = () =\u003E {\n  const endIndex = currentIndex + batchSize;\n  for (let i = currentIndex; i \u003C endIndex && i \u003C items.length; i++) {\n    items[i].classList.remove('lazy');\n  }\n  currentIndex = endIndex;\n\n  if (currentIndex \u003E= items.length) {\n    observer.disconnect();\n  }\n};\n\nconst options = {\n  rootMargin: '50px 0px',\n  threshold: 0.01\n};\n\nif ('IntersectionObserver' in window) {\n  observer = new IntersectionObserver(showNextBatch, options);\n\n  for (let i = 0; i \u003C batchSize; i++) {\n    items[i].classList.remove('lazy');\n  }\n  currentIndex = batchSize;\n\n  for (let i = batchSize; i \u003C items.length; i++) {\n    items[i].classList.add('lazy');\n    observer.observe(items[i]);\n  }\n} else {\n  // Fallback for browsers that don't support IntersectionObserver\n  for (let i = 0; i \u003C items.length; i++) {\n    items[i].classList.remove('lazy');\n  }\n}\n  let currentUrl = new URL(window.location.href);\n\nsetInterval(() =\u003E {\n  let newUrl = new URL(window.location.href);\n  if (currentUrl.search !== newUrl.search) {\n    currentUrl = newUrl;\n    resetObserver();\n  }\n}, 250);\n\nconst resetObserver = () =\u003E {\n  observer.disconnect();\n  let visibleItems = collectionList.querySelectorAll(':not(.lazy) .swiper-slide');\n  for (let i = 0; i \u003C visibleItems.length; i++) {\n    if (!visibleItems[i].classList.contains('lazy')) {\n      observer.observe(visibleItems[i]);\n    }\n  }\n};\n\u003C/script\u003E\n```\n\nThe .lazy class has the style display: none.\nEDIT: So now I have updated the code. The issue is now that it only shows the first 3 elements (the rest still has the lazy class).\n```\n\u003Cscript\u003E\nconst batchSize = 3;\n\nconst showNextBatch = () =\u003E {\n  const endIndex = currentIndex + batchSize;\n  for (let i = currentIndex; i \u003C endIndex && i \u003C items.length; i++) {\n    items[i].classList.remove('lazy');\n  }\n  currentIndex = endIndex;\n\n  if (currentIndex \u003E= items.length) {\n    observer.disconnect();\n  }\n};\n\nconst options = {\n  rootMargin: '50px 0px',\n  threshold: 0.01\n};\n\nif ('IntersectionObserver' in window) {\n  let observer;\n  let currentIndex = 0;\n  observer = new IntersectionObserver(showNextBatch, options);\n\n  let collectionList = document.querySelector('.swiper-wrapper');\n  let items = collectionList.querySelectorAll('.swiper-slide');\n\n  for (let i = 0; i \u003C batchSize; i++) {\n    items[i].classList.remove('lazy');\n  }\n  currentIndex = batchSize;\n\n  for (let i = currentIndex; i \u003C items.length; i++) {\n    items[i].classList.add(\"lazy\");\n    observer.observe(items[i]);\n  }\n  const mutationObserver = new MutationObserver(() =\u003E {\n    resetObserver();\n  });\n\n  mutationObserver.observe(document.body, {\n    childList: true,\n    subtree: true\n  });\n\n  const resetObserver = () =\u003E {\n    observer.disconnect();\n    collectionList = document.querySelector('.swiper-wrapper');\n    items = collectionList.querySelectorAll('.swiper-slide');\n\n    for (let i = 0; i \u003C items.length; i++) {\n      items[i].classList.remove('lazy');\n    }\n    currentIndex = batchSize;\n    observer = new IntersectionObserver(showNextBatch, options);\n\n    for (let i = currentIndex; i \u003C items.length; i++) {\n      items[i].classList.add(\"lazy\");\n      observer.observe(items[i]);\n    }\n  };\n}\n\u003C/script\u003E\n```\n\n",
        "Title": "Lazy Load collection list with filters in Javascript",
        "score": 0.857048
      },
      {
        "Id": [44747737],
        "Body": "It seems, pdf.js itself requesting whole byte range requests of a PDF file. Instead, is it possible to request only 5 pages on PDF load, On scroll can able to load another set of 5 pages, like that.. Is there a way to achieve this by using pdf.js ?\n",
        "Title": "PDF JS - Lazy load?",
        "score": 0.85147655
      },
      {
        "Id": [75053505],
        "Body": "The goal is to add loading=\"lazy\" code to every image before It's actually loaded.\nI cannot add that manually.\nThis is what I have so far (it adds the loading attribute, but image is still loaded even above the viewport):\n```\nfunction preloadFunc()\n{\n  var images = document.getElementsByTagName('img'); \n  console.log(images.length)\n  \n  for(var i = 0; i \u003C images.length; i++) {\n      console.log(images[i].src);\n\n      var bounding = images[i].getBoundingClientRect();\n      var myElementHeight = images[i].offsetHeight;\n      var myElementWidth = images[i].offsetWidth;\n  \n      if (bounding.top \u003E= -myElementHeight \n          && bounding.left \u003E= -myElementWidth\n          && bounding.right \u003C= (window.innerWidth || document.documentElement.clientWidth) + myElementWidth\n          && bounding.bottom \u003C= (window.innerHeight || document.documentElement.clientHeight) + myElementHeight) {\n  \n          console.log('Element is in the viewport!');\n      } else {\n        images[i].setAttribute('loading', 'lazy');\n  \n          console.log('Element is NOT in the viewport!');\n      }\n  } \n}\ndocument.addEventListener(\"DOMContentLoaded\", preloadFunc);\n```\n\n",
        "Title": "How do I execute javascript before image load, but after content load?",
        "score": 0.8342322
      },
      {
        "Id": [75083637],
        "Body": "I am lazy loading images on the page, using the [lazysizes](https://www.stackoverflow.com/) library I call the script at the beginning of the page\n`\u003Cscript\u003E (function(){ window.lazySizesConfig = { lazyClass: 'lazy', loadMode: 2, hFac: 10, }; }); \u003C/script\u003E`\nBut the question arose, how to make it so that after loading the page, after a couple of seconds, all the pictures on lazy loaded without waiting for the page to scroll?\nI couldn’t find a suitable parameter in the documentation, or I don’t understand something\n",
        "Title": "How to load all images after 2 seconds in lazysizes?",
        "score": 0.82245576
      },
      {
        "Id": [7308908],
        "Body": "In my page body, I need to insert this code as the result of an AJAX call:\n\n```\n\u003Cp\u003ELoading jQuery\u003C/p\u003E\n    \u003Cscript type='text/javascript' src='scripts/jquery/core/jquery-1.4.4.js'\u003E\u003C/script\u003E\n    \u003Cp\u003EUsing jQuery\u003C/p\u003E\n    \u003Cscript type='text/javascript'\u003E\n        $.ajax({\n            ...\n        });\n    \u003C/script\u003E\n```\n\n\nI can't use `$.load()` since the document has already loaded, so the event doesn't fire.\n\nIs this safe? If not, how do I make sure the jquery script has loaded before my custom, generated code is executed.\n",
        "Title": "Waiting for dynamically loaded script",
        "score": 0.8010615
      },
      {
        "Id": [73474538],
        "Body": "I found [this 2 year old solution](https://stackoverflow.com/a/65326178/19838182) that essentially counts the  and removes the loading attribute where the count =1 and implimented via snippets plugin for Wordpress.\nUnfortunately GTMetrix is still flagging \"don't lazy load LCP\" and when I inspect the image in my browsers I still see the attribute loading=\"lazy\" for the 1st (and every) image on every post.\nI suspected it was counting the site logo in the header as the 1st image but it too has loading=\"lazy\" so it seems that the code isn't working at all.\n- - - - - \nI'm not running any lazy-loading plugin and don't want to disable wordpress's global lazy load for all images, just the one above the fold in the LCP.\nSnippet I'm running:\n```\n/* Remove lazy load first image */\nfunction add_responsive_class($content)\n{\n    if ( is_single() || is_page() || is_front_page() || is_home() ) \n    {\n        $content = mb_convert_encoding($content, 'HTML-ENTITIES', \"UTF-8\");\n        $document = new DOMDocument();\n        libxml_use_internal_errors(true);\n        $document-\u003EloadHTML(utf8_decode($content));\n        $imgs = $document-\u003EgetElementsByTagName('img');\n        $img = $imgs[0];\n        if ($imgs[0] == 1) \n        { // Check first if it is the first image\n            $img-\u003EremoveAttribute( 'loading' );\n            $html = $document-\u003EsaveHTML();\n            return $html;\n        }\n        else \n        {\n            return $content;\n        }\n    }\n    else \n    {\n        return $content;\n    }\n}\nadd_filter ('the_content', 'add_responsive_class');\n```\n\nIf anyone can help me understand why this doesn't work on my site or has a different solution I'd appreciate the help.\n",
        "Title": "Disable lazy load in lagest contentful paint in WordPress",
        "score": 0.78948146
      },
      {
        "Id": [51881621],
        "Body": "I'm using the following code to load a script dynamically in an html page (since I don't know the URL before serving the page):\n```\nlet script = document.createElement('script');\nscript.src = 'https://foo/bar/myscript.js';\nscript.async = false;\nscript.defer = false;\ndocument.head.appendChild(script);\n\n//Try to use a global function defined in the script:\nmyFun(); //This raises \"undefined\" error\n```\n\nfollowing the suggestion here:\n[https://stackoverflow.com/a/7308984/300741](https://stackoverflow.com/a/7308984/300741)\nI set the `async` and `defer` attributes to `false`, to be sure that the script loads before I try to use it. But as you can see from the comment in the last line of code, this is not working.\nWhat am I missing here? Note that if I use `setTimeout()` to wait a bit before calling `myFun()` it works as expected, so it's definitely an async/deferred loading problem... but how do I fix it? (using Chrome by the way)\n",
        "Title": "Javascript: waiting for dynamically loaded script to be ready",
        "score": 0.7889216
      },
      {
        "Id": [72994051],
        "Body": "```\nconst BackgroundImage = styled.div`\n  background: url(${(props) =\u003E props.backgroundImage}) no-repeat center center;\n}\n```\n\nI use `div` in style component, but it has flickering issue waiting for the image to come in. Is there any lazy loading solution using styled-component's div?\n",
        "Title": "lazy loading for image in styled component",
        "score": 0.7770764
      },
      {
        "Id": [8448907],
        "Body": "I know, there are lots of answered questions about it here. My situation is a bit different, though, and I couldn't find an answer yet.\n\nI'm trying to show a message after the page has fully loaded. Using `$(document).ready, document.readyStateChange`, I don't care.\n\nThe thing is that the document gets ready right in the middle of a script that needs to be executed. I've tried to do it with `window.onload` (and it's jQuery equivalent), but it shows me the message before some images/elements show up. Is there a way to wait for it to be executed and only then show up the message? (Please keep in mind that I might need to do it several times in the same page).\n\nThanks in advance!\n",
        "Title": "How to check if page has FULLY loaded(scripts and all)?",
        "score": 0.7743952
      }
    ]
  }
}
